<?php

//Decoded by SoarTeam SoarTeam
class OpenStackVPS_Product extends MG_OpenStack_Product
{
	public $defaultConfig = array('OtherSettings' => 'Project Settings', 'tenantID' => array('title' => 'Default Tenant', 'type' => 'select', 'options' => array(), 'html' => '<a href="" id="check_default_tenant_access">Check access</a> <strong id="default_tenant_access"></strong>', 'useOptionsKeys' => true, 'rawDescription' => true), 'flavor' => array('title' => 'Default Flavor', 'type' => 'select', 'options' => array(), 'description' => '', 'useOptionsKeys' => true), 'iso_image' => array('title' => 'Default VM Image', 'type' => 'select', 'options' => array(), 'description' => '', 'useOptionsKeys' => true), 'debug_mode' => array('title' => 'Debug Mode', 'type' => 'select', 'default' => 0, 'description' => 'If enabled, all requests and responses to the API will be saved on the system Module Log.', 'options' => array('No', 'Yes'), 'useOptionsKeys' => true), 'Network' => 'Network Settings', 'fixed_network' => array('title' => 'Fixed Network', 'type' => 'select', 'options' => array(), 'useOptionsKeys' => true), 'floating_network' => array('title' => 'Floating Network', 'type' => 'select', 'options' => array(), 'useOptionsKeys' => true), 'ips' => array('title' => 'Default Number Of IP Addresses', 'type' => 'text', 'description' => '', 'default' => '4'), 'Backup' => 'Backup Settings', 'backupRouting' => array('title' => 'Backups Routing', 'type' => 'checkbox', 'description' => 'Enables replacement of old backups with new ones if backups limit is reached', 'default' => true), 'backupsFilesLimit' => array('title' => 'Default Backups Files Limit', 'type' => 'text', 'description' => 'Value \'-1\' is Unlimited', 'default' => '10'), 'VMSettings' => 'Virtual Machines Settings', 'caf_keypair' => array('title' => 'Inject SSH key', 'type' => 'checkbox', 'description' => 'Inject SSH key to instances', 'default' => true), 'delete_keypair' => array('title' => 'Delete SSH Private Key', 'type' => 'checkbox', 'description' => 'Delete SSH Private from database after first display in client area', 'default' => true), 'use_volumes' => array('title' => 'Use Volumes', 'type' => 'checkbox', 'description' => 'Virtual Machine Disk will be located on cinder Volume', 'default' => true), 'security_groups' => array('title' => 'Use Security Groups', 'type' => 'multiselect', 'options' => array(), 'description' => '', 'useOptionsKeys' => true), 'caf_change_password' => array('title' => 'Password Management', 'type' => 'checkbox', 'description' => 'Allow to change password', 'default' => true), 'ClientAreaFeatures' => 'Client Area Features', 'caf_backups' => array('title' => 'Backups Management', 'type' => 'checkbox', 'description' => '', 'default' => true), 'caf_resume' => array('title' => 'Resume', 'type' => 'checkbox', 'description' => '', 'default' => true), 'caf_rebuild' => array('title' => 'Rebuild', 'type' => 'checkbox', 'description' => '', 'default' => true), 'caf_console' => array('title' => 'Console', 'type' => 'checkbox', 'description' => '', 'default' => true), 'caf_softreboot' => array('title' => 'Soft Reboot', 'type' => 'checkbox', 'description' => '', 'default' => true), 'caf_hardreboot' => array('title' => 'Hard Reboot', 'type' => 'checkbox', 'description' => '', 'default' => true), 'caf_resetnetwork' => array('title' => 'Reset Network', 'type' => 'checkbox', 'description' => '', 'default' => true), 'caf_scheduled_logs' => array('title' => 'Scheduled Tasks', 'type' => 'checkbox', 'description' => '', 'default' => true));
	public $defaultCustomField = array('vmID' => array('type' => 'text', 'title' => 'VM ID', 'description' => 'Custom Field required for OpenStackVPS module', 'adminonly' => 'on'), 'privateFlavor' => array('type' => 'text', 'title' => 'Private Flavor ID', 'description' => 'Custom Field required for Private Flavors', 'adminonly' => 'on'));
	public function __construct($id, array $params = array())
	{
		$this->_assetsDir = '..' . DIRECTORY_SEPARATOR . 'modules' . DIRECTORY_SEPARATOR . 'servers' . DIRECTORY_SEPARATOR . 'OpenStackVPS' . DIRECTORY_SEPARATOR . 'assets';
		parent::__construct($id, $params);
	}
	/**
	 * FUNCTION setupDefaultConfigurableOptions
	 * Setup default configurable options
	 * @param string $type
	 * @return boolean
	 */
	public function setupDefaultConfigurableOptions($flavors, $images)
	{
		$this->load();
		\MGModule\OpenStack\PdoWrapper::query('INSERT INTO tblproductconfiggroups(name,description) VALUES(?,?)', array('Configurable options for ' . $this->name, 'Auto generated by module'));
		$group_id = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query('INSERT INTO tblproductconfiglinks(gid,pid) VALUES(?,?)', array($group_id, $this->id));
		$query = 'INSERT INTO tblproductconfigoptions(gid,optionname,optiontype,qtyminimum,qtymaximum,`order`,hidden) VALUES(?,?,1,0,0,0,0)';
		$query_suboptions = 'INSERT INTO tblproductconfigoptionssub(configid,optionname,sortorder,hidden) VALUES(?,?,0,0)';
		$options_ids = array();
		$config_ids = array();
		\MGModule\OpenStack\PdoWrapper::query($query, array($group_id, 'flavor|Flavor'));
		$options_ids['flavor'] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query, array($group_id, 'isoImage|VM Image'));
		$options_ids['isoImage'] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query, array($group_id, 'ipAddresses|IP Addresses'));
		$options_ids['ipAddresses'] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query, array($group_id, 'backupsFilesLimit|Backups Files Limit'));
		$options_ids['backupsFilesLimit'] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query, array($group_id, 'disk|Disk'));
		$options_ids['disk'] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query, array($group_id, 'ram|RAM'));
		$options_ids['ram'] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query, array($group_id, 'vcpus|VCPUs'));
		$options_ids['vcpus'] = \MGModule\OpenStack\PdoWrapper::insertId();
		foreach ($flavors as $flavor) {
			\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['flavor'], $flavor->UUID . '|' . $flavor->name));
			$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		}
		foreach ($images as $img) {
			\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['isoImage'], $img->UUID . '|' . $img->name));
			$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		}
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['ipAddresses'], '1|1'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['ipAddresses'], '2|2'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['ipAddresses'], '3|3'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['ipAddresses'], '4|4'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['disk'], '5|5 [GB]'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['disk'], '10|10 [GB]'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['disk'], '20|20 [GB]'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['disk'], '30|30 [GB]'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['ram'], '512|512 [MB]'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['ram'], '1024|1024 [MB]'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['ram'], '2048|2048 [MB]'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['ram'], '3072|3072 [MB]'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['vcpus'], '1|1'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['vcpus'], '2|2'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['vcpus'], '3|3'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['vcpus'], '4|4'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['backupsFilesLimit'], '-1|Unlimited'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['backupsFilesLimit'], '1|1'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['backupsFilesLimit'], '2|2'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		\MGModule\OpenStack\PdoWrapper::query($query_suboptions, array($options_ids['backupsFilesLimit'], '3|3'));
		$config_ids[] = \MGModule\OpenStack\PdoWrapper::insertId();
		$queryCur = \MGModule\OpenStack\PdoWrapper::query('SELECT `id` FROM  `tblcurrencies`');
		while ($row = \MGModule\OpenStack\PdoWrapper::fetchAssoc($queryCur)) {
			$currencyId = $row['id'];
			foreach ($config_ids as $id) {
				\MGModule\OpenStack\PdoWrapper::query("INSERT INTO `tblpricing`( `type` , `currency` , `relid` , `msetupfee` , `qsetupfee` , `ssetupfee` , `asetupfee` , `bsetupfee` , `tsetupfee` , `monthly` , `quarterly` , `semiannually` , `annually` , `biennially` , `triennially`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", array('configoptions', $currencyId, $id, '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00'));
			}
		}
		return true;
	}
}